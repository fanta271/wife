// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Content.ContentManager = (function(_super) {

    __extends(ContentManager, _super);

    function ContentManager() {
      var view, _i, _len, _ref,
        _this = this;
      ContentManager.__super__.constructor.call(this);
      this.ui = new Content.UIs.Layout();
      this.ui.bind(Content.Event.UI.CONTENT_RECT, 1, function(e, d) {
        return _this._setContentRect(d);
      });
      
      this.members = this.views = [];
      this.add(this.home = new Content.Views.Home());
      this.add(this.contact = new Content.Views.Contact());
      this.add(this.gallery = new Content.Views.Gallery());
      
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
		view.delegate('select-by-name', 1, function(e, d) {
		  _this.showViewByName(d);
		});
        view.delegate(Construct.Delegate.SELECT, 1, function(e, d) {
          return _this._setView(d);
        });
        view.getter(Content.Get.CONTENT_RECT, 1, function() {
          return _this.contentRect;
        });
        view.getter(Content.Get.UI.MENU, 1, function() {
          return _this.ui.getMenu();
        });
      }
    }

    ContentManager.prototype.ui = null;

    ContentManager.prototype.contentRect = null;

    ContentManager.prototype.views = null;

    ContentManager.prototype.currentView = null;

    ContentManager.prototype._setContentRect = function(rect) {
      return this.contentRect = rect;
    };

    ContentManager.prototype._setView = function(view) {
      var offDef, _ref,
        _this = this;
      if (this.currentView === view) {
        return;
      }
      if (this.currentView != null) {
        offDef = this.currentView.off();
      }
      if ((_ref = this.deferred['set-view']) != null) {
        _ref.reject();
      }
      this.deferred['set-view'] = Util.when(offDef);
      return this.deferred['set-view'].done(function() {
        _this.currentView = view;
        view.on();
        return delete _this.deferred['set-view'];
      });
    };

    ContentManager.prototype.showViewByName = function(name) {
      var view, _i, _len, _ref,
      _ref = this.views;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        if (view.name == name)
          this._setView(view);
      }
    };

    ContentManager.prototype.activate = function() {
      this.ui.activate();
      return ContentManager.__super__.activate.call(this);
    };

    ContentManager.prototype.deactivate = function() {
      return ContentManager.__super__.deactivate.call(this);
    };

    return ContentManager;

  })(Manager);

}).call(this);
