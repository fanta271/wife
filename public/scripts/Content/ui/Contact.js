// Generated by CoffeeScript 1.3.3
(function() {
  var ContentUI, FormHelper, MenuUI,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Content.UIs.Contact = (function(_super) {

    __extends(Contact, _super);

    function Contact() {
      Contact.__super__.constructor.call(this);
      this.content = new ContentUI();
      this.menu = new MenuUI();
      this.content.getters = this.getters;
      this.content.events = this.events;
      this.content.delegates = this.delegates;
      this.menu.getters = this.getters;
      this.menu.events = this.events;
      this.menu.delegates = this.delegates;
    }

    Contact.prototype.on = function() {
      return this.content.activate();
    };

    Contact.prototype.off = function() {
      return this.content.deactivate();
    };

    Contact.prototype.activate = function() {
      this.menu.activate();
      return Contact.__super__.activate.call(this);
    };

    Contact.prototype.deactivate = function() {
      return this.menu.deactivate();
    };

    return Contact;

  })(Construct);

  MenuUI = (function(_super) {

    __extends(MenuUI, _super);

    function MenuUI() {
      return MenuUI.__super__.constructor.apply(this, arguments);
    }

    MenuUI.prototype.construcor = function() {
      return MenuUI.__super__.construcor.call(this);
    };

    MenuUI.MENU = '.Menu .Contact';

    MenuUI.prototype._wire = function() {
      var _this = this;
      $(MenuUI.MENU).bind('click', function() {
        return _this.notify(Construct.Event.UI.SELECT);
      });
      return void 0;
    };

    MenuUI.prototype._unwire = function() {
      $(MenuUI.MENU).unbind();
      return void 0;
    };

    MenuUI.prototype.activate = function() {
      this._wire();
      return MenuUI.__super__.activate.call(this);
    };

    MenuUI.prototype.deactivate = function() {
      this._unwire();
      return MenuUI.__super__.deactivate.call(this);
    };

    return MenuUI;

  })(Construct);

  ContentUI = (function(_super) {

    __extends(ContentUI, _super);

    function ContentUI() {
      ContentUI.__super__.constructor.call(this);
      this.formHelper = new FormHelper(this);
    }

    ContentUI.CONTENT = '.Content.Contact';

    ContentUI.prototype.content = null;

    ContentUI.prototype.formHelper = null;

    ContentUI.prototype._position = function() {
      var $left, rect;
      $left = $(this.get(Content.Get.UI.MENU));
      rect = this.get(Content.Get.CONTENT_RECT);
      return $(this.content).css('left', function() {
        $left = $('#left');
        return Math.max($left.position().left + $left.width() + 100, $left.position().left + $left.width() + ((rect.left + rect.width) - ($left.position().left + $left.width()) - $(this).width()) / 2) + 'px';
      }).css('top', function() {
        return Math.max(100, ($(window).height() - $(this).height()) / 2) + "px";
      });
    };

    ContentUI.prototype._show = function() {
      var $content;
      this.content = ($content = $(ContentUI.CONTENT))[0];
      $content.css({
        position: 'absolute',
        left: 0,
        top: 0,
        visibility: 'hidden'
      }).show();
      this._position();
      return $content.css({
        visibility: 'visible'
      });
    };

    ContentUI.prototype._hide = function() {
      return $(ContentUI.CONTENT).hide();
    };

    ContentUI.prototype._wire = function() {};

    ContentUI.prototype._unwire = function() {};

    ContentUI.prototype.activate = function() {
      if (this.formHelper.active === false) {
        this.formHelper.activate();
      }
      this._show();
      this._wire();
      return ContentUI.__super__.activate.call(this);
    };

    ContentUI.prototype.deactivate = function() {
      this._hide();
      this._unwire();
      return ContentUI.__super__.deactivate.call(this);
    };

    return ContentUI;

  })(Construct);

  FormHelper = (function(_super) {

    __extends(FormHelper, _super);

    function FormHelper(b) {
      FormHelper.__super__.constructor.call(this);
      this.base = b;
    }

    FormHelper.NAME = {
      LABEL: '.Contact .Name .Label',
      INPUT: '.Contact .Name .Input'
    };

    FormHelper.EMAIL = {
      LABEL: '.Contact .Email .Label',
      INPUT: '.Contact .Email .Input'
    };

    FormHelper.CELL = {
      LABEL: '.Contact .Cell .Label',
      INPUT: '.Contact .Cell .Input'
    };

    FormHelper.NOTE = {
      LABEL: '.Contact .Note .Label',
      INPUT: '.Contact .Note .Input'
    };

    FormHelper.SEND = '.Contact .Send';

    FormHelper.CLOSE = '.Contact .Close';

    FormHelper.prototype.animationLoops = [];

    FormHelper.prototype.bufData = '';

    FormHelper.prototype._wire = function() {
      var _this = this;
      this.base.bind('activated', 1, function(e, d) {
        return _this._validateNote();
      });
      $(FormHelper.NOTE.INPUT).bind('focus.' + this.base.guid, function() {
        return $(FormHelper.NOTE.LABEL).hide();
      });
      $(FormHelper.NOTE.INPUT).bind('blur.' + this.base.guid, function(e) {
        if ($(e.currentTarget).val() === '') {
          return $(FormHelper.NOTE.LABEL).show();
        }
      });
      $(FormHelper.SEND).bind('click.' + this.base.guid, function(e) {
        if (_this._validate() === true) {
          return _this._send();
        }
		e.preventDefault();
      });
      return void 0;
    };

    FormHelper.prototype._validate = function() {
      var bad, badCount, good, i, v, _ref;
      good = {
        name: $(FormHelper.NAME.LABEL),
        email: $(FormHelper.EMAIL.LABEL),
        cell: $(FormHelper.CELL.LABEL),
        note: $(FormHelper.NOTE.LABEL)
      };
      bad = {};
      badCount = 0;
      _ref = {
        name: FormHelper.NAME.INPUT,
        email: FormHelper.EMAIL.INPUT,
        cell: FormHelper.CELL.INPUT,
        note: FormHelper.NOTE.INPUT
      };
      for (i in _ref) {
        v = _ref[i];
        if ($(v).val() === '') {
          bad[i] = good[i];
          delete good[i];
          badCount++;
        }
      }
      this._warnings(good, bad);
      if (badCount === 0) {
        return true;
      } else {
        return false;
      }
    };

    FormHelper.prototype._warnings = function(good, bad) {
      var $v, i, repeat, v, _fn, _i, _len, _ref, _ref1,
        _this = this;
      if (!(good != null)) {
        good = {};
      }
      if (!(bad != null)) {
        bad = {};
      }
      _ref = this.animationLoops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        clearInterval(v);
      }
      _ref1 = $.extend({}, bad, good);
      for (i in _ref1) {
        $v = _ref1[i];
        $v.stop();
      }
      this.animationLoops = [];
      repeat = function($elm) {
        $elm.animate({
          color: '#df2f2f'
        }, 500, function() {
          $elm.animate({
            color: '#8f8f8f'
          }, 500);
          return void 0;
        });
        return void 0;
      };
      _fn = function(i, $v) {
        _this.animationLoops.push(setInterval(function() {
          return repeat($v);
        }, 3000));
        return repeat($v);
      };
      for (i in bad) {
        $v = bad[i];
        _fn(i, $v);
      }
      return void 0;
    };

    FormHelper.prototype._send = function() {
      var data, _ref,
        _this = this;
      data = {
        name: $(FormHelper.NAME.INPUT).val(),
        email: $(FormHelper.EMAIL.INPUT).val(),
        cell: $(FormHelper.CELL.INPUT).val(),
        note: $(FormHelper.NOTE.INPUT).val()
      };
      if (JSON.stringify(this.bufData) === JSON.stringify(data)) {
        return;
      }
      this.bufData = data;
      if ((_ref = this.deferred['send']) != null) {
        _ref.abort();
      }
      this.deferred['send'] = $.post('data/email', this.bufData, function(resp) {
        return alert('Contact info sent.');
      });
      return void 0;
    };

    FormHelper.prototype._validateNote = function() {
      if ($(FormHelper.NOTE.INPUT).val() === '') {
        $(FormHelper.NOTE.LABEL).show();
      } else {
        $(FormHelper.NOTE.LABEL).hide();
      }
      return void 0;
    };

    FormHelper.prototype.activate = function() {
      this._wire();
      return FormHelper.__super__.activate.call(this);
    };

    return FormHelper;

  })(Helper);

}).call(this);
